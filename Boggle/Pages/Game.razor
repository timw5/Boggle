@page "/Game"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navman
@inject IJSRuntime js
@implements IDisposable
@inject IDbContextFactory<sliceofbreadContext> dbFactory


<link rel="stylesheet" type="text/css" href="StyleSheet.css">


    <section id="game">
        <header>
            <h3>Boggle</h3>
        </header>
        
        <section id="dice-grid">
            <div class="dice">
                
            @foreach (var row in b.BoggleBoard)
            {
                @foreach(var item in row)
                {

                    //callback event: "btnClick(item)"
                    //void "() => btnClick(item)"
                    string id = item + count++.ToString();
                    if(!dict.Keys.Contains(id))
                    {
                        dict.Add(id, false);
                    }
                    <button @onclick="() => btnClick(id)" id="@id" class="letter" value="@item">@item</button>
                }
                 
            }

            </div>
        </section>

        <div class="opponent stats">
            <div>Opponent's Username:</div>
            <div>""</div>
            <div>Opponent's Score:</div>
            <div>0</div>
        </div>

        <section id="word-info">
            <div id="word-holder">
                <h5>Current Word:</h5>
                <p id="current-word"></p>
            </div>
            <button id="submit-btn">Submit Word</button>
        </section>
        <table id="score-table">
            <tr>
                <th>Word</th>
                <th>Score</th>
            </tr>
            <tr>
                <td>Total:</td>
                <td id="total-points">0</td>
            </tr>
        </table>
    </section>
    
@code {

    public void Dispose()
    {
        Context?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        Busy = true;
        try
        {
            Context = dbFactory.CreateDbContext();
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
        g = new(new GameSetup("123",10), Context);

    }

    bool Busy;
    Board b = new Board();
    sliceofbreadContext? Context;
    Models.Game? g;
    public static string CurrWordSelected = "";
    public Dictionary<string, bool> dict = new();
    int count = 0;

    public void btnClick(string a)
    {
        count = 0;
        char selected = a[0];

        if(dict[a] is true)
        {
            if(g.IsWord(CurrWordSelected))
            {
                Models.Game.AddScore(CurrWordSelected);
                CurrWordSelected = "";
                foreach (var item in dict.Keys)
                {
                    if(dict[item])
                    {
                        dict[item] = false;
                        js.InvokeVoidAsync("getAll", item);
                        StateHasChanged();
                    }
                }
                StateHasChanged();

            }
            else
            {
                Task.Run(() => js.InvokeVoidAsync("alert", "Not a word!"));
                CurrWordSelected = "";

                foreach(var item in dict.Keys)
                {
                    if(dict[item])
                    {
                        dict[item] = false;
                        js.InvokeVoidAsync("getAll", item);
                        StateHasChanged();
                    }   
                }
            }
        }
        else
        {
            CurrWordSelected += selected; 
            js.InvokeVoidAsync("getAll", a);
            dict[a] = true;
            StateHasChanged();
        }



        return;
    }
}
