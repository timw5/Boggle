@page "/GameLobby"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navman
@inject User usr
@inject Board b
@inject IJSRuntime js

<h3>GameLobby</h3>
<h1>  @passcode</h1>
<button @onclick="click" class="btn btn-primary @disabled"> StartGame</button>
<br />
<br />
<h2 class="@winnerdisabled">@wonstatus</h2>

<table class="table @winnerdisabled">
    <thead>
        <tr>
            <th scope="col">Words:</th>
        </tr>
    </thead>
    <tbody>

@if( usr.GuessedWords.Count > 0) {
    foreach(var item in usr.GuessedWords) {
                <tr>
                    <td>@item</td>
                </tr>
    }
}
    </tbody>
</table>
<button @onclick="@waitToRedirect" class=" btn btn-danger @winnerdisabled">End Game</button>




@code {

    public string disabled = "disabled";
    string passcode = "";
    HubConnection? hub;
    string winner = "";
    string winnerdisabled = "invisible";
    string wonstatus = "";
    List<List<char>> board = new List<List<char>>();


    protected override async Task OnInitializedAsync() {
        if (usr.password != null)
        {
            passcode = usr.password;
        }

        b = new Board();
        board = b.BoggleBoard;
        usr.board = board;
        if (usr.IsGameFinished)
        {
            if (usr.hub != null)
            {
                await Task.Delay(1000);
                winnerdisabled = "visible";
            }
            if (usr.Name != winner) {
                wonstatus = "You Won!";
            }
            else {
                wonstatus = "You Lost!";
            }
        }
        else
        {
            if (usr.hub != null)
            {
                if (await Task.Run(() => usr.hub.InvokeAsync<bool>("IsReady", usr.password)))
                {
                    disabled = "";
                }
                else
                {
                    wait(1);
                }
            }
        }


        await base.OnInitializedAsync();
    }



    public async void waitToRedirect() {

        Task.WaitAll();
        await usr.hub.InvokeAsync("endgame", usr.password, usr.Name);
        this.usr.hub = null;
        this.usr = null;
        this.usr = new User();
        b = null;
        b = new Board();
        navman.NavigateTo("/", true);
    }

    public async void wait(int count)
    {
        if (count > 10)
        {
            navman.NavigateTo("/");
            await js.InvokeVoidAsync("location.reload()");
            
        }
        if (usr.hub != null)
        {
            if (await Task.Run(() => usr.hub.InvokeAsync<bool>("IsReady", usr.password)))
            {
                disabled = "";
                StateHasChanged();
                return;
            }
            else
            {
                Thread.Sleep(5000);

                wait(count++);
                StateHasChanged();
                return;
            }
        }
    }


    public async void click()
    {
        if (usr.hub != null)
        {
            await Task.Run(() => usr.hub.InvokeAsync("ImReady", usr.Name));
            string jscall = $"console.log";
            await js.InvokeVoidAsync(jscall, usr.Name);
            Ready();
        }

    }

    public async void Ready()
    {
        if (usr.hub != null)
        {
            bool test = await Task.Run(() => usr.hub.InvokeAsync<bool>("ready", usr.password, usr.Name));
            if (test)
            {
                navman.NavigateTo("/Game");
                return;
            }
            else
            {
                await Task.Delay(100);
                Ready();
            }
        }
    }



    
}
